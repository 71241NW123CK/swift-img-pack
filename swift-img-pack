#!/usr/bin/env python

import argparse
import base64
import os
import os.path
import string

def fileToB64String(fn):
    f = open(fn, 'rb')
    s = f.read()
    f.close()
    b = base64.b64encode(s)
    return b.decode('utf-8')

def fileToStaticFunc(fn, inExtensionStruct):
    resourceName = escapeComponent(os.path.split(fn)[-1])
    b64String = fileToB64String(fn)
    indentation = '        ' if inExtensionStruct else '    '
    result = ''
    result += indentation + 'public static var %s: UIImage {\n' % resourceName
    result += indentation + '    get {\n'
    result += indentation + '        let b64String = "%s"\n' % b64String
    result += indentation + '        let b64Data = Data(base64Encoded: b64String)!\n'
    result += indentation + '        return UIImage(data: b64Data)!\n'
    result += indentation + '    }\n'
    result += indentation + '}\n'
    return result

supportedExtensions = ['png', 'tiff', 'tif', 'jpg', 'jpeg', 'gif', 'bmp', 'BMPf', 'ico', 'cur', 'xbm'] # ref: https://developer.apple.com/library/content/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/LoadingImages/LoadingImages.html#//apple_ref/doc/uid/TP40010156-CH17-SW7

def escapeComponent(component):
    parts = component.split('.')
    if parts[0][0] in string.digits or parts[0][0] == '_':
        parts = [''] + parts
    escapedComponent = '_'.join(parts)
    escapedComponent = escapedComponent.replace(' ', '_')
    escapedComponent = escapedComponent.replace('-', '_')
    return escapedComponent

def handleOsWalkStep(dirpath, dirnames, filenames, baseStructName, baseDir):
    components = baseStructName.split('.')
    isCurrentDir = True
    p = os.path.relpath(dirpath, baseDir)
    if p != '.':
        if len(p) > 2 and p[:2] == './':
            p = p[2:]
        pathComponents = os.path.split(p)
        if pathComponents[0] == '':
            pathComponents = pathComponents[1:]
        components += [escapeComponent(component) for component in pathComponents]
        isCurrentDir = False
    imageFns = [os.path.join(dirpath, fn) for fn in filenames if fn.split('.')[-1] in supportedExtensions]
    imageFns.sort()
    staticFuncs = [fileToStaticFunc(fn, not isCurrentDir) for fn in imageFns]
    result = ''
    if isCurrentDir:
        result += 'public extension %s {\n' % '.'.join(components)
    else:
        result += 'public extension %s {\n' % '.'.join(components[:-1])
    if not isCurrentDir:
        result += '    public struct %s {\n' % components[-1]
    result += '\n'.join(staticFuncs)
    if not isCurrentDir:
        result += '    }\n'
    result += '}\n'
    return result

def main():
    argumentParser = argparse.ArgumentParser()
    argumentParser.add_argument('baseStructName', help='the Swift struct to extend with packed images')
    argumentParser.add_argument('-d', '--dir', help='the directory to be packed', default='.')
    argumentParser.add_argument('-o', '--output', help='the output file', default='Images.swift')
    argumentParser.add_argument('-b', '--base-struct', help='the base struct needs to be created', action='store_true')
    argumentParser.add_argument('-m', '--module', help='the name of the module to import, if it is different from the base struct')
    args = argumentParser.parse_args()
    dir = args.dir
    baseStructName = args.baseStructName
    steps = list(os.walk(dir))
    walkSteps = [handleOsWalkStep(dirpath, dirnames, filenames, baseStructName, dir) for dirpath, dirnames, filenames in steps]
    result = ''
    result += '// Automatically generated by swift-img-pack\n'
    result += '\n'
    result += 'import %s\n' % args.module if args.module is not None else args.baseStructName
    result += 'import UIKit\n'
    result += '\n'
    if args.base_struct:
        baseStructNameComponents = baseStructName.split('.')
        if len(baseStructNameComponents) == 1:
            result += 'public struct %s {}\n' % baseStructName
            result += '\n'
        else:
            result += 'public extension %s {\n' % '.'.join(baseStructNameComponents[:-1])
            result += '    public struct %s {}\n' % baseStructNameComponents[-1]
            result += '}\n'
            result += '\n'
    result += '\n'.join(walkSteps)
    f = open(args.output, 'w')
    f.write(result)
    f.close()

if __name__ == '__main__':
    main()
